#include "stdafx.h"
#include "DX11NameTranslator.h"

namespace KY
{
	namespace DX
	{
		D3D11_USAGE DX11NameTranslator::ToD3DUsage(ResourceUsage usage) const
		{
			switch (usage)
			{
			case RU_Default:
				return D3D11_USAGE_DEFAULT;
			case RU_Immutable:
				return D3D11_USAGE_IMMUTABLE;
			case RU_Dynamic:
				return D3D11_USAGE_DYNAMIC;
			case RU_Stage:
				return D3D11_USAGE_STAGING;
			default:
				BOOST_ASSERT(false && "invalid enum");
				return D3D11_USAGE(-1);
			}
		}

		DXGI_FORMAT DX11NameTranslator::ToDXGI_FORMAT(TexFormat tf) const
		{
			return DXGI_FORMAT(tf);
		}

		D3D11_BIND_FLAG DX11NameTranslator::ToBingFlag(BufferType type) const
		{
			D3D11_BIND_FLAG flags[] = { D3D11_BIND_VERTEX_BUFFER, D3D11_BIND_INDEX_BUFFER, D3D11_BIND_CONSTANT_BUFFER, };
			BOOST_ASSERT(COUNT_OF(flags) > uint32(type));
			return flags[type];
		}

		D3D11_PRIMITIVE_TOPOLOGY DX11NameTranslator::ToPrimitiveTopology(PrimitiveType type) const
		{
			D3D11_PRIMITIVE_TOPOLOGY d3dpri[] = {				
				D3D11_PRIMITIVE_TOPOLOGY_POINTLIST,
				D3D11_PRIMITIVE_TOPOLOGY_LINELIST,
				D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP,
				D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
				D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
				D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
				D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
				D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
				D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
				D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
				D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST
			};
				
			BOOST_ASSERT(COUNT_OF(d3dpri) > uint32(type));
			return d3dpri[type];
		}

	}


}